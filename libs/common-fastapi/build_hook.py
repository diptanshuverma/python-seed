# ruff: noqa: T201

import os
from datetime import UTC, datetime

from hatchling.builders.hooks.plugin.interface import BuildHookInterface  # pylint: disable=import-error


class CustomBuildHook(BuildHookInterface):
    def __init__(self, *args: object, **kwargs: object) -> None:
        super().__init__(*args, **kwargs)
        self.current_dir = os.getcwd()

        # Paths to the `_build_info.py` and `_version.py` files
        self.build_info_path: str = os.path.join(self.current_dir, "common_fastapi", "_build_info.py")
        self.version_file_path: str = os.path.join(self.current_dir, "common_fastapi", "_version.py")

        # Initial contents for the files
        self.initial_build_info_content: str = """\
# This file contains build-time information. It is updated during the build process.

BUILD_TIME = "not-built"
"""

        self.initial_version_content: str = """\
# These version placeholders will be replaced later during substitution.
__version__ = "0.0.0"
"""

    def generate_build_info(self) -> None:
        """Generate build-time information and write it to the `_build_info.py` file."""
        build_time: str = datetime.now(UTC).strftime("%Y-%m-%dT%H:%M:%SZ")
        content: str = f"""\
# This file is autogenerated. Do not edit manually.

BUILD_TIME = "{build_time}"
"""
        with open(self.build_info_path, "w", encoding="utf-8") as file:
            file.write(content)
        print(f"Updating file: {self.build_info_path}")
        print(f"Build info updated with build time: {build_time}")

    def revert_build_info(self) -> None:
        """Revert the `_build_info.py` file to its initial content."""
        try:
            with open(self.build_info_path, "w", encoding="utf-8") as file:
                file.write(self.initial_build_info_content)
            print(f"Updating file: {self.build_info_path}")
            print("Build info reverted to initial content.")
        except OSError as e:  # Catch specific exceptions related to file operations
            print(f"Error reverting version info: {e}")

    def revert_version_info(self) -> None:
        """Revert the `_version.py` file to its initial content."""
        try:
            with open(self.version_file_path, "w", encoding="utf-8") as file:
                file.write(self.initial_version_content)
            print(f"Updating file: {self.version_file_path}")
            print("Version info reverted to initial content.")
        except OSError as e:
            print(f"Error reverting version info: {e}")

    def initialize(self, _: str, __: dict) -> None:
        """Executes pre-build tasks."""
        print("Running pre-build tasks...")
        self.generate_build_info()

    def finalize(self, _: str, __: dict, ___: str) -> None:
        """Executes post-build tasks."""
        print("Running post-build tasks...")
        self.revert_build_info()
        self.revert_version_info()
